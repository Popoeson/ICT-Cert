<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Token Logs</title>
  <style>
    :root {
      --bg-color: #f4f4f4;
      --text-color: #222;
      --box-bg: #ffffff;
      --input-bg: #ffffff;
      --button-bg: #0074cc;
      --button-hover: #005fa3;
      --shadow-color: #0074cc;
    }

    body.dark {
      --bg-color: #121212;
      --text-color: #f0f0f0;
      --box-bg: #1e1e1e;
      --input-bg: #2a2a2a;
      --button-bg: #00ffcc;
      --button-hover: #00e6b8;
      --shadow-color: #00ffcc;
    }

    body {
      background-color: var(--bg-color);
      color: var(--text-color);
      font-family: 'Segoe UI', sans-serif;
      margin: 0;
      padding: 20px;
      transition: background-color 0.3s, color 0.3s;
    }

    .toggle {
      position: absolute;
      top: 15px;
      right: 20px;
    }

    .toggle button {
      padding: 8px 14px;
      background-color: var(--button-bg);
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    h1 {
      text-align: center;
      margin-top: 30px;
    }

    .search-container {
      text-align: center;
      margin: 20px auto;
    }

    input[type="text"] {
      padding: 10px;
      border-radius: 6px;
      border: none;
      width: 300px;
      background-color: var(--input-bg);
      color: var(--text-color);
      font-size: 15px;
    }

    input[type="text"]:focus {
      outline: none;
      box-shadow: 0 0 5px var(--button-bg);
    }

    .table-wrapper {
      background: var(--box-bg);
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 0 10px var(--shadow-color);
      margin: 20px auto;
      max-width: 100%;
      overflow-x: auto;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 10px;
    }

    th, td {
      padding: 12px 15px;
      text-align: left;
      border-bottom: 1px solid #444;
    }

    th {
      background-color: var(--input-bg);
      color: var(--text-color);
    }

    .pagination {
      text-align: center;
      margin-top: 20px;
    }

    .pagination button {
      background-color: var(--button-bg);
      color: white;
      border: none;
      padding: 8px 12px;
      margin: 0 3px;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    .pagination button.active {
      background-color: var(--button-hover);
    }

    .pagination button:disabled {
      background-color: #777;
      cursor: not-allowed;
    }
  </style>
</head>
<body>

  <div class="toggle">
    <button onclick="toggleTheme()">ðŸŒ“ Toggle Theme</button>
  </div>

  <h1>Token Transactions</h1>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search by reference, token, email, status or date..." onkeyup="filterTokens()">
  </div>

  <div class="table-wrapper">
    <table id="tokenTable">
      <thead>
        <tr>
          <th>#</th>
          <th>Token</th>
          <th>Email</th>
          <th>Reference</th>
          <th>Status</th>
          <th>Date</th>
        </tr>
      </thead>
      <tbody id="tableBody"></tbody>
    </table>
  </div>

  <div class="pagination" id="pagination"></div>

  <script>
    let tokens = [];
    let currentPage = 1;
    const rowsPerPage = 10;

    async function fetchTokens() {
      try {
        const response = await fetch("https://testpro-mvh8.onrender.com/api/tokens");
        const data = await response.json();
        tokens = data.reverse(); // newest first
        renderTable();
      } catch (err) {
        alert("Error fetching tokens");
        console.error(err);
      }
    }

    function renderTable() {
      const tableBody = document.getElementById("tableBody");
      tableBody.innerHTML = "";

      const searchValue = document.getElementById("searchInput").value.toLowerCase();

      const filtered = tokens.filter(token =>
        token.token?.toLowerCase().includes(searchValue) ||
        token.reference?.toLowerCase().includes(searchValue) ||
        token.studentEmail?.toLowerCase().includes(searchValue) ||
        token.status?.toLowerCase().includes(searchValue) ||
        new Date(token.createdAt).toLocaleString().toLowerCase().includes(searchValue)
      );

      const start = (currentPage - 1) * rowsPerPage;
      const paginatedTokens = filtered.slice(start, start + rowsPerPage);

      paginatedTokens.forEach((token, index) => {
        const row = document.createElement("tr");
        row.innerHTML = `
          <td>${start + index + 1}</td>
          <td>${token.token}</td>
          <td>${token.studentEmail}</td>
          <td>${token.reference}</td>
          <td>${token.status}</td>
          <td>${new Date(token.createdAt).toLocaleString()}</td>
        `;
        tableBody.appendChild(row);
      });

      renderPagination(filtered.length);
    }

    function renderPagination(totalItems) {
      const totalPages = Math.ceil(totalItems / rowsPerPage);
      const pagination = document.getElementById("pagination");
      pagination.innerHTML = "";

      for (let i = 1; i <= totalPages; i++) {
        const btn = document.createElement("button");
        btn.textContent = i;
        if (i === currentPage) btn.classList.add("active");
        btn.onclick = () => {
          currentPage = i;
          renderTable();
        };
        pagination.appendChild(btn);
      }
    }

    function filterTokens() {
      currentPage = 1;
      renderTable();
    }

    function toggleTheme() {
      document.body.classList.toggle("dark");
      localStorage.setItem("cbtTheme", document.body.classList.contains("dark") ? "dark" : "light");
    }

    window.addEventListener("DOMContentLoaded", () => {
      const savedTheme = localStorage.getItem("cbtTheme");
      if (savedTheme === "dark") document.body.classList.add("dark");
      fetchTokens();
    });
  </script>

</body>
    </html>
